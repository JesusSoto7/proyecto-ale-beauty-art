<html>
    <head>
      <script src="https://sdk.mercadopago.com/js/v2"></script>
    </head>
    <body>
      <style>
        #form-checkout {
          display: flex;
          flex-direction: column;
          max-width: 600px;
        }
      
        .container {
          height: 18px;
          display: inline-block;
          border: 1px solid rgb(118, 118, 118);
          border-radius: 2px;
          padding: 1px 2px;
        }
      </style>
      <div id="cardPaymentBrick_container">
        <form id="form-checkout">
          <div id="form-checkout__cardNumber" class="container"></div>
          <div id="form-checkout__expirationDate" class="container"></div>
          <div id="form-checkout__securityCode" class="container"></div>
          <input type="text" id="form-checkout__cardholderName" />
          <select id="form-checkout__issuer"></select>
          <select id="form-checkout__installments"></select>
          <select id="form-checkout__identificationType"></select>
          <input type="text" id="form-checkout__identificationNumber" />
          <input type="email" id="form-checkout__cardholderEmail" />
        
          <button type="submit" id="form-checkout__submit">Pagar</button>
          <progress value="0" class="progress-bar">Carregando...</progress>
        </form>
      </div>
      <script>
        const mp = new MercadoPago('YOUR_PUBLIC_KEY', {
          locale: 'es-CO'
        });
        const bricksBuilder = mp.bricks();
        const renderCardPaymentBrick = async (bricksBuilder) => {
          const settings = {
            initialization: {
              amount: 100, // monto a ser pago
              payer: {
                email: "",
              },
            },
            customization: {
              visual: {
                style: {
                  theme: 'bootstrap', // | 'dark' | 'bootstrap' | 'flat'
                  customVariables: {
                  },
                },
              },
              paymentMethods: {
                maxInstallments: 1,
              },
            },
            callbacks: {
              onReady: () => {
                // callback llamado cuando Brick esté listo
              },
              onSubmit: (cardFormData) => {
                //  callback llamado cuando el usuario haga clic en el botón enviar los datos
                //  ejemplo de envío de los datos recolectados por el Brick a su servidor
                return new Promise((resolve, reject) => {
                  fetch("/process_payment", {
                    method: "POST",
                    headers: {
                      "Content-Type": "application/json",
                    },
                    body: JSON.stringify(cardFormData)
                  })
                    .then((response) => {
                      // recibir el resultado del pago
                      resolve();
                    })
                    .catch((error) => {
                      // tratar respuesta de error al intentar crear el pago
                      reject();
                    })
                });
              },
              onError: (error) => {
                // callback llamado para todos los casos de error de Brick
              },
            },
          };
          window.cardPaymentBrickController = await bricksBuilder.create('cardPayment', 'cardPaymentBrick_container', settings);
        };
        renderCardPaymentBrick(bricksBuilder);
      </script>
    </body>
</html>